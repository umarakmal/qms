{"version":3,"file":"static/js/431.edc6a0c2.chunk.js","mappings":"gQAYA,SAASA,IACP,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAoB,CAAAC,UACnBF,EAAAA,EAAAA,KAACG,EAAAA,GAAiB,KAGxB,CACA,IAAMC,EAAG,GAAAC,OAAMC,8BAiQf,UAhQoB,WAClB,IAAAC,GAAmCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxCI,EAAWF,EAAA,GAAEG,EAAWH,EAAA,GACzBI,EAAU,CACd,CACEC,MAAO,KACPC,WAAY,QACZC,cAAe,0BACfC,WAAY,SAACC,GACX,MAA0B,WAAtBA,EAAOC,IAAIC,QACNpB,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,SAAUpB,SAAEgB,EAAOC,IAAII,MAE1CvB,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,OAAQpB,SAAEgB,EAAOC,IAAII,IAEnD,EACAC,MAAO,KAET,CACEV,MAAO,iBACPC,WAAY,aACZC,cAAe,yBACfC,WAAY,SAACC,GACX,IACIO,EADeP,EAAOC,IAAIO,eAAeC,MAAM,KACrBC,MAAM,GACpC,MAA0B,WAAtBV,EAAOC,IAAIC,QACNpB,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,SAAUpB,SAAEuB,EAAaI,KAAK,QAEjD7B,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,OAAQpB,SAAEuB,EAAaI,KAAK,MAE1D,EACAL,MAAO,KAET,CACEV,MAAO,SACPC,WAAY,SACZC,cAAe,yBACfC,WAAY,SAACC,GACX,MAA0B,WAAtBA,EAAOC,IAAIC,QACNpB,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,SAAUpB,SAAEgB,EAAOC,IAAIW,UAE1C9B,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,OAAQpB,SAAEgB,EAAOC,IAAIW,QAEnD,EACAN,MAAO,KAET,CACEV,MAAO,UACPC,WAAY,UACZC,cAAe,yBACfC,WAAY,SAACC,GACX,MAA0B,WAAtBA,EAAOC,IAAIC,QACNpB,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,SAAUpB,SAAEgB,EAAOC,IAAIb,WAE1CN,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,OAAQpB,SAAEgB,EAAOC,IAAIb,SAEnD,EACAkB,MAAO,KAET,CACEV,MAAO,aACPC,WAAY,cACZC,cAAe,yBACfC,WAAY,SAACC,GACX,MAA0B,WAAtBA,EAAOC,IAAIC,QACNpB,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,SAAUpB,SAAEgB,EAAOC,IAAIY,cAE1C/B,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,OAAQpB,SAAEgB,EAAOC,IAAIY,YAEnD,EACAP,MAAO,KAET,CACEV,MAAO,YACPC,WAAY,aACZC,cAAe,yBACfC,WAAY,SAACC,GACX,MAA0B,WAAtBA,EAAOC,IAAIC,QACNpB,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,SAAUpB,SAAEgB,EAAOC,IAAIa,aAE1ChC,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,OAAQpB,SAAEgB,EAAOC,IAAIa,WAEnD,EACAR,MAAO,KAET,CACEV,MAAO,YACPC,WAAY,eACZC,cAAe,yBACfC,WAAY,SAACC,GACX,MAA0B,WAAtBA,EAAOC,IAAIC,QACNpB,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,SAAUpB,SAAEgB,EAAOC,IAAIc,aAE1CjC,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,OAAQpB,SAAEgB,EAAOC,IAAIc,WAEnD,EACAT,MAAO,KAET,CACEV,MAAO,SACPC,WAAY,SACZC,cAAe,yBACfC,WAAY,SAACC,GACX,MAA0B,WAAtBA,EAAOC,IAAIC,QACNpB,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,SAAUpB,SAAEgB,EAAOC,IAAIC,UAE1CpB,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,OAAQpB,SAAEgB,EAAOC,IAAIC,QAEnD,EACAI,MAAO,MAIPU,EAAI,GACFC,EAAOxB,EAAYyB,KAAI,SAACC,EAASC,GAAK,MAAM,CAChDf,GAAIe,EAAQ,EACZC,IAAKF,EAAQE,IACbC,SAAWC,EAAIJ,EAAQ/B,QAAQqB,MAAM,KACrCG,OAAQW,EAAE,GACVnC,QAASmC,EAAE,GACXV,WAAYU,EAAE,GACdC,SAWkBC,EAXO,IAAIC,KAAKP,EAAQJ,WAAhCC,EAYH,CACLW,EAAaF,EAAKG,WAClBD,EAAaF,EAAKI,WAAa,GAC/BJ,EAAKK,eACLnB,KAAK,MAfPH,eAAgBW,EAAQX,eACxBM,UAAWK,EAAQL,UACnBC,UAAWC,EACXd,OAAQiB,EAAQjB,QAOlB,IAAoBuB,CANnB,IAED,SAASE,EAAaI,GACpB,OAAOA,EAAIC,WAAWC,SAAS,EAAG,IACpC,CAUA,IAAIV,EAAI,IAERW,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,GACMC,EAAAA,EAAAA,MAASP,MAAM,KAAD,EAAvB,OAALA,EAAKI,EAAAI,KAAAJ,EAAAE,KAAA,EACOG,MAAM,GAAD/D,OAClBD,EAAG,oDACN,CACEiE,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBd,MAAAA,MAGJ,KAAD,EAXQ,OAAHC,EAAGG,EAAAI,KAAAJ,EAAAE,KAAA,EAYUL,EAAIc,OAAO,KAAD,EAAvBb,EAAIE,EAAAI,KACS,MAAfP,EAAIxC,QAAmByC,EAGpBA,GAGHjD,EAAYiD,GACZA,EAAKzB,KAAI,SAACuC,GAGR,IAFA,IACIlD,EADekD,EAAGjD,eAAeC,MAAM,KACbC,MAAM,GAC3BgD,EAAI,EAAGA,EAAInD,EAAaoD,OAAQD,IACpBnD,EAAamD,GAC5BA,EAAInD,EAAaoD,OAAS,GACT,GAGzB,KAZAC,QAAQC,IAAI,YAHdD,QAAQC,IAAI,UAiBb,yBAAAhB,EAAAiB,OAAA,GAAAtB,EAAA,KACF,kBAlCY,OAAAJ,EAAA2B,MAAA,KAAAC,UAAA,KAmCb7B,GACF,GAAG,IAEH,IAAIuB,EAAI,EACJO,EAAI,EACJC,EAAe,GACfC,EAAiB,GACb1E,EAAYyB,KAAI,SAACuC,GACL,WAAdA,EAAGvD,OACLwD,IACuB,aAAdD,EAAGvD,QACZ+D,GAEJ,IAGA,OAFAC,EAAaE,KAAKV,GAClBS,EAAeC,KAAKH,IAElBI,EAAAA,EAAAA,MAAA,OAAArF,SAAA,EACEF,EAAAA,EAAAA,KAACwF,EAAAA,EAAM,KACPxF,EAAAA,EAAAA,KAACyF,EAAAA,EAAI,KACLzF,EAAAA,EAAAA,KAAC0F,EAAAA,GAAc,KACf1F,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,kBAAiBzF,UAC9BF,EAAAA,EAAAA,KAAA,WAAS2F,UAAU,WAAUzF,UAC3BF,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,mBAAkBzF,UAC/BF,EAAAA,EAAAA,KAAA,QAAAE,UACEF,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,WAAUzF,UACvBF,EAAAA,EAAAA,KAAA,OAAKqB,MAAO,CAAEuE,SAAU,UAAYD,UAAU,YAAWzF,UACvDqF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,sBAAqBzF,SAAA,EAClCF,EAAAA,EAAAA,KAAA,OAAK2F,UAAU,cAAazF,UAC1BF,EAAAA,EAAAA,KAAA,MAAIqB,MAAO,CAAEuE,SAAU,QAAUD,UAAU,aAAYzF,SAAC,oBAI1DqF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,YAAWzF,SAAA,EACxBF,EAAAA,EAAAA,KAAA,OAAKqB,MAAO,CAAEwE,SAAU,QAAS3F,UAC/BF,EAAAA,EAAAA,KAAC8F,EAAAA,EAAQ,CACPC,WAAY,CACVC,QAASjG,GAEXkG,YAAU,EACVC,QAAQ,UACRC,SAAU,SAAC9D,GAAO,OAAKA,EAAQE,GAAG,EAClCJ,KAAMA,EACNtB,QAASA,EACTuF,aAAc,CACZC,WAAY,CACVC,gBAAiB,CACfC,SAAU,UAMpBhB,EAAAA,EAAAA,MAAA,OACEI,UAAU,gBACVtE,MAAO,CAAEmF,QAAS,QAAStG,SAAA,EAE3BqF,EAAAA,EAAAA,MAAA,KAAGI,UAAU,qCAAoCzF,SAAA,CAAC,0BACxBS,EAAYkE,WAEtCU,EAAAA,EAAAA,MAAA,KAAGI,UAAU,wCAAuCzF,SAAA,CAAC,2BAC1BkF,MAE3BG,EAAAA,EAAAA,MAAA,KAAGI,UAAU,uCAAsCzF,SAAA,CAAC,6BACvBmF,2BAW/CrF,EAAAA,EAAAA,KAACyG,EAAAA,EAAM,MAGb,C","sources":["component/qmsSheet/SheetStatus.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport Menu from \"../Menu\";\nimport { ToastContainer } from \"react-toastify\";\nimport {\n  DataGrid,\n  GridToolbarExport,\n  GridToolbarContainer,\n} from \"@mui/x-data-grid\";\nimport { isAuth } from \"../auth/helpers\";\n\nfunction MyExportButton() {\n  return (\n    <GridToolbarContainer>\n      <GridToolbarExport />\n    </GridToolbarContainer>\n  );\n}\nconst url = `${process.env.REACT_APP_BACKEND_URL}`;\nconst SheetStatus = () => {\n  const [getuserdata, setUserdata] = useState([]);\n  const columns = [\n    {\n      field: \"id\",\n      headerName: \"S.No.\",\n      cellClassName: \"small font-weight-bold \",\n      renderCell: (params) => {\n        if (params.row.status === \"active\") {\n          return <p style={{ color: \"green\" }}>{params.row.id}</p>;\n        } else {\n          return <p style={{ color: \"red\" }}>{params.row.id}</p>;\n        }\n      },\n      width: 120,\n    },\n    {\n      field: \"collectionname\",\n      headerName: \"Sheet Name\",\n      cellClassName: \"small font-weight-bold\",\n      renderCell: (params) => {\n        const sheetsname = params.row.collectionname.split(\"_\");\n        var newSheetName = sheetsname.slice(1);\n        if (params.row.status === \"active\") {\n          return <p style={{ color: \"green\" }}>{newSheetName.join(\"_\")}</p>;\n        } else {\n          return <p style={{ color: \"red\" }}>{newSheetName.join(\"_\")}</p>;\n        }\n      },\n      width: 150,\n    },\n    {\n      field: \"client\",\n      headerName: \"Client\",\n      cellClassName: \"small font-weight-bold\",\n      renderCell: (params) => {\n        if (params.row.status === \"active\") {\n          return <p style={{ color: \"green\" }}>{params.row.client}</p>;\n        } else {\n          return <p style={{ color: \"red\" }}>{params.row.client}</p>;\n        }\n      },\n      width: 150,\n    },\n    {\n      field: \"process\",\n      headerName: \"Process\",\n      cellClassName: \"small font-weight-bold\",\n      renderCell: (params) => {\n        if (params.row.status === \"active\") {\n          return <p style={{ color: \"green\" }}>{params.row.process}</p>;\n        } else {\n          return <p style={{ color: \"red\" }}>{params.row.process}</p>;\n        }\n      },\n      width: 150,\n    },\n    {\n      field: \"subprocess\",\n      headerName: \"Sub Process\",\n      cellClassName: \"small font-weight-bold\",\n      renderCell: (params) => {\n        if (params.row.status === \"active\") {\n          return <p style={{ color: \"green\" }}>{params.row.subprocess}</p>;\n        } else {\n          return <p style={{ color: \"red\" }}>{params.row.subprocess}</p>;\n        }\n      },\n      width: 150,\n    },\n    {\n      field: \"createdBy\",\n      headerName: \"Created By\",\n      cellClassName: \"small font-weight-bold\",\n      renderCell: (params) => {\n        if (params.row.status === \"active\") {\n          return <p style={{ color: \"green\" }}>{params.row.createdBy}</p>;\n        } else {\n          return <p style={{ color: \"red\" }}>{params.row.createdBy}</p>;\n        }\n      },\n      width: 150,\n    },\n    {\n      field: \"createdAt\",\n      headerName: \"Created Date\",\n      cellClassName: \"small font-weight-bold\",\n      renderCell: (params) => {\n        if (params.row.status === \"active\") {\n          return <p style={{ color: \"green\" }}>{params.row.createdAt}</p>;\n        } else {\n          return <p style={{ color: \"red\" }}>{params.row.createdAt}</p>;\n        }\n      },\n      width: 150,\n    },\n    {\n      field: \"status\",\n      headerName: \"Status\",\n      cellClassName: \"small font-weight-bold\",\n      renderCell: (params) => {\n        if (params.row.status === \"active\") {\n          return <p style={{ color: \"green\" }}>{params.row.status}</p>;\n        } else {\n          return <p style={{ color: \"red\" }}>{params.row.status}</p>;\n        }\n      },\n      width: 150,\n    },\n  ];\n\n  var d = [];\n  const rows = getuserdata.map((element, index) => ({\n    id: index + 1,\n    _id: element._id,\n    proceess: (p = element.process.split(\"|\")),\n    client: p[0],\n    process: p[1],\n    subprocess: p[2],\n    dateeee: (d = formatDate(new Date(element.createdAt))),\n    collectionname: element.collectionname,\n    createdBy: element.createdBy,\n    createdAt: d,\n    status: element.status,\n  }));\n\n  function padTo2Digits(num) {\n    return num.toString().padStart(2, \"0\");\n  }\n\n  function formatDate(date) {\n    return [\n      padTo2Digits(date.getDate()),\n      padTo2Digits(date.getMonth() + 1),\n      date.getFullYear(),\n    ].join(\"-\");\n  }\n\n  var p = [];\n  var addnewSheetName = \"\";\n  useEffect(() => {\n    const getdata = async () => {\n      const cm_id = await isAuth().cm_id;\n      const res = await fetch(\n        `${url}/api/find-data-with-process-name-for-managesheet`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            cm_id,\n          }),\n        }\n      );\n      const data = await res.json();\n      if (res.status === 422 || !data) {\n        console.log(\"error \");\n      } else {\n        if (!data) {\n          console.log(\"No Data!\");\n        } else {\n          setUserdata(data);\n          data.map((el) => {\n            const sheetsname = el.collectionname.split(\"_\");\n            var newSheetName = sheetsname.slice(1);\n            for (var i = 0; i < newSheetName.length; i++) {\n              addnewSheetName += newSheetName[i];\n              if (i < newSheetName.length - 1) {\n                addnewSheetName += \"_\";\n              }\n            }\n          });\n        }\n      }\n    };\n    getdata();\n  }, []);\n\n  var i = 0;\n  var j = 0;\n  var activeLength = [];\n  var inactiveLength = [];\n  var z = getuserdata.map((el) => {\n    if (el.status === \"active\") {\n      i++;\n    } else if (el.status === \"inactive\") {\n      j++;\n    }\n  });\n  activeLength.push(i);\n  inactiveLength.push(j);\n  return (\n    <div>\n      <Header />\n      <Menu />\n      <ToastContainer />\n      <div className=\"content-wrapper\">\n        <section className=\"content \">\n          <div className=\"container-fluid \">\n            <form>\n              <div className=\"row mt-2\">\n                <div style={{ fontSize: \"12.3px\" }} className=\"col-md-12\">\n                  <div className=\"card card-info mt-3\">\n                    <div className=\"card-header\">\n                      <h3 style={{ fontSize: \"1rem\" }} className=\"card-title\">\n                        Sheet Status\n                      </h3>\n                    </div>\n                    <div className=\"card-body\">\n                      <div style={{ overflow: \"auto\" }}>\n                        <DataGrid\n                          components={{\n                            Toolbar: MyExportButton,\n                          }}\n                          autoHeight\n                          density=\"compact\"\n                          getRowId={(element) => element._id}\n                          rows={rows}\n                          columns={columns}\n                          initialState={{\n                            pagination: {\n                              paginationModel: {\n                                pageSize: 7,\n                              },\n                            },\n                          }}\n                        />\n                      </div>\n                      <div\n                        className=\"row card-body\"\n                        style={{ display: \"none\" }}\n                      >\n                        <p className=\" font-weight-bold bg-info col-md-3\">\n                          No. of total sheets :- {getuserdata.length}\n                        </p>\n                        <p className=\" font-weight-bold bg-success col-md-3\">\n                          No. of active sheets :- {activeLength}\n                        </p>\n                        <p className=\" font-weight-bold bg-danger col-md-3\">\n                          No. of inactive sheets :- {inactiveLength}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        </section>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default SheetStatus;\n"],"names":["MyExportButton","_jsx","GridToolbarContainer","children","GridToolbarExport","url","concat","process","_useState","useState","_useState2","_slicedToArray","getuserdata","setUserdata","columns","field","headerName","cellClassName","renderCell","params","row","status","style","color","id","width","newSheetName","collectionname","split","slice","join","client","subprocess","createdBy","createdAt","d","rows","map","element","index","_id","proceess","p","dateeee","date","Date","padTo2Digits","getDate","getMonth","getFullYear","num","toString","padStart","useEffect","getdata","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cm_id","res","data","wrap","_context","prev","next","isAuth","sent","fetch","method","headers","body","JSON","stringify","json","el","i","length","console","log","stop","apply","arguments","j","activeLength","inactiveLength","push","_jsxs","Header","Menu","ToastContainer","className","fontSize","overflow","DataGrid","components","Toolbar","autoHeight","density","getRowId","initialState","pagination","paginationModel","pageSize","display","Footer"],"sourceRoot":""}